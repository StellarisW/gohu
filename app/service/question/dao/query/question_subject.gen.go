// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"main/app/service/question/dao/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newQuestionSubject(db *gorm.DB) questionSubject {
	_questionSubject := questionSubject{}

	_questionSubject.questionSubjectDo.UseDB(db)
	_questionSubject.questionSubjectDo.UseModel(&model.QuestionSubject{})

	tableName := _questionSubject.questionSubjectDo.TableName()
	_questionSubject.ALL = field.NewField(tableName, "*")
	_questionSubject.ID = field.NewInt64(tableName, "id")
	_questionSubject.UserID = field.NewInt64(tableName, "user_id")
	_questionSubject.SubCount = field.NewInt32(tableName, "sub_count")
	_questionSubject.AnswerCount = field.NewInt32(tableName, "answer_count")
	_questionSubject.ViewCount = field.NewInt64(tableName, "view_count")
	_questionSubject.State = field.NewInt32(tableName, "state")
	_questionSubject.Attrs = field.NewInt32(tableName, "attrs")
	_questionSubject.CreateTime = field.NewTime(tableName, "create_time")
	_questionSubject.UpdateTime = field.NewTime(tableName, "update_time")

	_questionSubject.fillFieldMap()

	return _questionSubject
}

type questionSubject struct {
	questionSubjectDo questionSubjectDo

	ALL         field.Field
	ID          field.Int64
	UserID      field.Int64
	SubCount    field.Int32
	AnswerCount field.Int32
	ViewCount   field.Int64
	State       field.Int32
	Attrs       field.Int32
	CreateTime  field.Time
	UpdateTime  field.Time

	fieldMap map[string]field.Expr
}

func (q questionSubject) Table(newTableName string) *questionSubject {
	q.questionSubjectDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q questionSubject) As(alias string) *questionSubject {
	q.questionSubjectDo.DO = *(q.questionSubjectDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *questionSubject) updateTableName(table string) *questionSubject {
	q.ALL = field.NewField(table, "*")
	q.ID = field.NewInt64(table, "id")
	q.UserID = field.NewInt64(table, "user_id")
	q.SubCount = field.NewInt32(table, "sub_count")
	q.AnswerCount = field.NewInt32(table, "answer_count")
	q.ViewCount = field.NewInt64(table, "view_count")
	q.State = field.NewInt32(table, "state")
	q.Attrs = field.NewInt32(table, "attrs")
	q.CreateTime = field.NewTime(table, "create_time")
	q.UpdateTime = field.NewTime(table, "update_time")

	q.fillFieldMap()

	return q
}

func (q *questionSubject) WithContext(ctx context.Context) *questionSubjectDo {
	return q.questionSubjectDo.WithContext(ctx)
}

func (q questionSubject) TableName() string { return q.questionSubjectDo.TableName() }

func (q questionSubject) Alias() string { return q.questionSubjectDo.Alias() }

func (q *questionSubject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *questionSubject) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 9)
	q.fieldMap["id"] = q.ID
	q.fieldMap["user_id"] = q.UserID
	q.fieldMap["sub_count"] = q.SubCount
	q.fieldMap["answer_count"] = q.AnswerCount
	q.fieldMap["view_count"] = q.ViewCount
	q.fieldMap["state"] = q.State
	q.fieldMap["attrs"] = q.Attrs
	q.fieldMap["create_time"] = q.CreateTime
	q.fieldMap["update_time"] = q.UpdateTime
}

func (q questionSubject) clone(db *gorm.DB) questionSubject {
	q.questionSubjectDo.ReplaceDB(db)
	return q
}

type questionSubjectDo struct{ gen.DO }

func (q questionSubjectDo) Debug() *questionSubjectDo {
	return q.withDO(q.DO.Debug())
}

func (q questionSubjectDo) WithContext(ctx context.Context) *questionSubjectDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q questionSubjectDo) ReadDB() *questionSubjectDo {
	return q.Clauses(dbresolver.Read)
}

func (q questionSubjectDo) WriteDB() *questionSubjectDo {
	return q.Clauses(dbresolver.Write)
}

func (q questionSubjectDo) Clauses(conds ...clause.Expression) *questionSubjectDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q questionSubjectDo) Returning(value interface{}, columns ...string) *questionSubjectDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q questionSubjectDo) Not(conds ...gen.Condition) *questionSubjectDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q questionSubjectDo) Or(conds ...gen.Condition) *questionSubjectDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q questionSubjectDo) Select(conds ...field.Expr) *questionSubjectDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q questionSubjectDo) Where(conds ...gen.Condition) *questionSubjectDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q questionSubjectDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *questionSubjectDo {
	return q.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (q questionSubjectDo) Order(conds ...field.Expr) *questionSubjectDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q questionSubjectDo) Distinct(cols ...field.Expr) *questionSubjectDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q questionSubjectDo) Omit(cols ...field.Expr) *questionSubjectDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q questionSubjectDo) Join(table schema.Tabler, on ...field.Expr) *questionSubjectDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q questionSubjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) *questionSubjectDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q questionSubjectDo) RightJoin(table schema.Tabler, on ...field.Expr) *questionSubjectDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q questionSubjectDo) Group(cols ...field.Expr) *questionSubjectDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q questionSubjectDo) Having(conds ...gen.Condition) *questionSubjectDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q questionSubjectDo) Limit(limit int) *questionSubjectDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q questionSubjectDo) Offset(offset int) *questionSubjectDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q questionSubjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *questionSubjectDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q questionSubjectDo) Unscoped() *questionSubjectDo {
	return q.withDO(q.DO.Unscoped())
}

func (q questionSubjectDo) Create(values ...*model.QuestionSubject) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q questionSubjectDo) CreateInBatches(values []*model.QuestionSubject, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q questionSubjectDo) Save(values ...*model.QuestionSubject) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q questionSubjectDo) First() (*model.QuestionSubject, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionSubject), nil
	}
}

func (q questionSubjectDo) Take() (*model.QuestionSubject, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionSubject), nil
	}
}

func (q questionSubjectDo) Last() (*model.QuestionSubject, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionSubject), nil
	}
}

func (q questionSubjectDo) Find() ([]*model.QuestionSubject, error) {
	result, err := q.DO.Find()
	return result.([]*model.QuestionSubject), err
}

func (q questionSubjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuestionSubject, err error) {
	buf := make([]*model.QuestionSubject, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q questionSubjectDo) FindInBatches(result *[]*model.QuestionSubject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q questionSubjectDo) Attrs(attrs ...field.AssignExpr) *questionSubjectDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q questionSubjectDo) Assign(attrs ...field.AssignExpr) *questionSubjectDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q questionSubjectDo) Joins(fields ...field.RelationField) *questionSubjectDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q questionSubjectDo) Preload(fields ...field.RelationField) *questionSubjectDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q questionSubjectDo) FirstOrInit() (*model.QuestionSubject, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionSubject), nil
	}
}

func (q questionSubjectDo) FirstOrCreate() (*model.QuestionSubject, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionSubject), nil
	}
}

func (q questionSubjectDo) FindByPage(offset int, limit int) (result []*model.QuestionSubject, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q questionSubjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q questionSubjectDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q *questionSubjectDo) withDO(do gen.Dao) *questionSubjectDo {
	q.DO = *do.(*gen.DO)
	return q
}
