// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"main/app/service/question/dao/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAnswerIndex(db *gorm.DB) answerIndex {
	_answerIndex := answerIndex{}

	_answerIndex.answerIndexDo.UseDB(db)
	_answerIndex.answerIndexDo.UseModel(&model.AnswerIndex{})

	tableName := _answerIndex.answerIndexDo.TableName()
	_answerIndex.ALL = field.NewField(tableName, "*")
	_answerIndex.ID = field.NewInt64(tableName, "id")
	_answerIndex.QuestionID = field.NewInt64(tableName, "question_id")
	_answerIndex.UserID = field.NewInt64(tableName, "user_id")
	_answerIndex.ApproveCount = field.NewInt32(tableName, "approve_count")
	_answerIndex.LikeCount = field.NewInt32(tableName, "like_count")
	_answerIndex.CollectCount = field.NewInt32(tableName, "collect_count")
	_answerIndex.State = field.NewInt32(tableName, "state")
	_answerIndex.Attrs = field.NewInt32(tableName, "attrs")
	_answerIndex.CreateTime = field.NewTime(tableName, "create_time")
	_answerIndex.UpdateTime = field.NewTime(tableName, "update_time")

	_answerIndex.fillFieldMap()

	return _answerIndex
}

type answerIndex struct {
	answerIndexDo answerIndexDo

	ALL          field.Field
	ID           field.Int64
	QuestionID   field.Int64
	UserID       field.Int64
	ApproveCount field.Int32
	LikeCount    field.Int32
	CollectCount field.Int32
	State        field.Int32
	Attrs        field.Int32
	CreateTime   field.Time
	UpdateTime   field.Time

	fieldMap map[string]field.Expr
}

func (a answerIndex) Table(newTableName string) *answerIndex {
	a.answerIndexDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a answerIndex) As(alias string) *answerIndex {
	a.answerIndexDo.DO = *(a.answerIndexDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *answerIndex) updateTableName(table string) *answerIndex {
	a.ALL = field.NewField(table, "*")
	a.ID = field.NewInt64(table, "id")
	a.QuestionID = field.NewInt64(table, "question_id")
	a.UserID = field.NewInt64(table, "user_id")
	a.ApproveCount = field.NewInt32(table, "approve_count")
	a.LikeCount = field.NewInt32(table, "like_count")
	a.CollectCount = field.NewInt32(table, "collect_count")
	a.State = field.NewInt32(table, "state")
	a.Attrs = field.NewInt32(table, "attrs")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")

	a.fillFieldMap()

	return a
}

func (a *answerIndex) WithContext(ctx context.Context) *answerIndexDo {
	return a.answerIndexDo.WithContext(ctx)
}

func (a answerIndex) TableName() string { return a.answerIndexDo.TableName() }

func (a answerIndex) Alias() string { return a.answerIndexDo.Alias() }

func (a *answerIndex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *answerIndex) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["question_id"] = a.QuestionID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["approve_count"] = a.ApproveCount
	a.fieldMap["like_count"] = a.LikeCount
	a.fieldMap["collect_count"] = a.CollectCount
	a.fieldMap["state"] = a.State
	a.fieldMap["attrs"] = a.Attrs
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
}

func (a answerIndex) clone(db *gorm.DB) answerIndex {
	a.answerIndexDo.ReplaceDB(db)
	return a
}

type answerIndexDo struct{ gen.DO }

func (a answerIndexDo) Debug() *answerIndexDo {
	return a.withDO(a.DO.Debug())
}

func (a answerIndexDo) WithContext(ctx context.Context) *answerIndexDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a answerIndexDo) ReadDB() *answerIndexDo {
	return a.Clauses(dbresolver.Read)
}

func (a answerIndexDo) WriteDB() *answerIndexDo {
	return a.Clauses(dbresolver.Write)
}

func (a answerIndexDo) Clauses(conds ...clause.Expression) *answerIndexDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a answerIndexDo) Returning(value interface{}, columns ...string) *answerIndexDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a answerIndexDo) Not(conds ...gen.Condition) *answerIndexDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a answerIndexDo) Or(conds ...gen.Condition) *answerIndexDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a answerIndexDo) Select(conds ...field.Expr) *answerIndexDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a answerIndexDo) Where(conds ...gen.Condition) *answerIndexDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a answerIndexDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *answerIndexDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a answerIndexDo) Order(conds ...field.Expr) *answerIndexDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a answerIndexDo) Distinct(cols ...field.Expr) *answerIndexDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a answerIndexDo) Omit(cols ...field.Expr) *answerIndexDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a answerIndexDo) Join(table schema.Tabler, on ...field.Expr) *answerIndexDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a answerIndexDo) LeftJoin(table schema.Tabler, on ...field.Expr) *answerIndexDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a answerIndexDo) RightJoin(table schema.Tabler, on ...field.Expr) *answerIndexDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a answerIndexDo) Group(cols ...field.Expr) *answerIndexDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a answerIndexDo) Having(conds ...gen.Condition) *answerIndexDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a answerIndexDo) Limit(limit int) *answerIndexDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a answerIndexDo) Offset(offset int) *answerIndexDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a answerIndexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *answerIndexDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a answerIndexDo) Unscoped() *answerIndexDo {
	return a.withDO(a.DO.Unscoped())
}

func (a answerIndexDo) Create(values ...*model.AnswerIndex) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a answerIndexDo) CreateInBatches(values []*model.AnswerIndex, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a answerIndexDo) Save(values ...*model.AnswerIndex) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a answerIndexDo) First() (*model.AnswerIndex, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnswerIndex), nil
	}
}

func (a answerIndexDo) Take() (*model.AnswerIndex, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnswerIndex), nil
	}
}

func (a answerIndexDo) Last() (*model.AnswerIndex, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnswerIndex), nil
	}
}

func (a answerIndexDo) Find() ([]*model.AnswerIndex, error) {
	result, err := a.DO.Find()
	return result.([]*model.AnswerIndex), err
}

func (a answerIndexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AnswerIndex, err error) {
	buf := make([]*model.AnswerIndex, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a answerIndexDo) FindInBatches(result *[]*model.AnswerIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a answerIndexDo) Attrs(attrs ...field.AssignExpr) *answerIndexDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a answerIndexDo) Assign(attrs ...field.AssignExpr) *answerIndexDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a answerIndexDo) Joins(fields ...field.RelationField) *answerIndexDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a answerIndexDo) Preload(fields ...field.RelationField) *answerIndexDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a answerIndexDo) FirstOrInit() (*model.AnswerIndex, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnswerIndex), nil
	}
}

func (a answerIndexDo) FirstOrCreate() (*model.AnswerIndex, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnswerIndex), nil
	}
}

func (a answerIndexDo) FindByPage(offset int, limit int) (result []*model.AnswerIndex, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a answerIndexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a answerIndexDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a *answerIndexDo) withDO(do gen.Dao) *answerIndexDo {
	a.DO = *do.(*gen.DO)
	return a
}
