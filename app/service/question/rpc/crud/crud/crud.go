// Code generated by goctl. DO NOT EDIT!
// Source: crud.proto

package crud

import (
	"context"

	"main/app/service/question/rpc/crud/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteAnswerReq    = pb.DeleteAnswerReq
	DeleteAnswerRes    = pb.DeleteAnswerRes
	DeleteQuestionReq  = pb.DeleteQuestionReq
	DeleteQuestionRes  = pb.DeleteQuestionRes
	HideAnswerReq      = pb.HideAnswerReq
	HideAnswerRes      = pb.HideAnswerRes
	HideQuestionReq    = pb.HideQuestionReq
	HideQuestionRes    = pb.HideQuestionRes
	PublishAnswerReq   = pb.PublishAnswerReq
	PublishAnswerRes   = pb.PublishAnswerRes
	PublishQuestionReq = pb.PublishQuestionReq
	PublishQuestionRes = pb.PublishQuestionRes
	UpdateAnswerReq    = pb.UpdateAnswerReq
	UpdateAnswerRes    = pb.UpdateAnswerRes
	UpdateQuestionReq  = pb.UpdateQuestionReq
	UpdateQuestionRes  = pb.UpdateQuestionRes

	Crud interface {
		PublishQuestion(ctx context.Context, in *PublishQuestionReq, opts ...grpc.CallOption) (*PublishQuestionRes, error)
		UpdateQuestion(ctx context.Context, in *UpdateQuestionReq, opts ...grpc.CallOption) (*UpdateQuestionRes, error)
		HideQuestion(ctx context.Context, in *HideQuestionReq, opts ...grpc.CallOption) (*HideQuestionRes, error)
		DeleteQuestion(ctx context.Context, in *DeleteQuestionReq, opts ...grpc.CallOption) (*DeleteQuestionRes, error)
		PublishAnswer(ctx context.Context, in *PublishAnswerReq, opts ...grpc.CallOption) (*PublishAnswerRes, error)
		UpdateAnswer(ctx context.Context, in *UpdateAnswerReq, opts ...grpc.CallOption) (*UpdateAnswerRes, error)
		HideAnswer(ctx context.Context, in *HideAnswerReq, opts ...grpc.CallOption) (*HideAnswerRes, error)
		DeleteAnswer(ctx context.Context, in *DeleteAnswerReq, opts ...grpc.CallOption) (*DeleteAnswerRes, error)
	}

	defaultCrud struct {
		cli zrpc.Client
	}
)

func NewCrud(cli zrpc.Client) Crud {
	return &defaultCrud{
		cli: cli,
	}
}

func (m *defaultCrud) PublishQuestion(ctx context.Context, in *PublishQuestionReq, opts ...grpc.CallOption) (*PublishQuestionRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.PublishQuestion(ctx, in, opts...)
}

func (m *defaultCrud) UpdateQuestion(ctx context.Context, in *UpdateQuestionReq, opts ...grpc.CallOption) (*UpdateQuestionRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.UpdateQuestion(ctx, in, opts...)
}

func (m *defaultCrud) HideQuestion(ctx context.Context, in *HideQuestionReq, opts ...grpc.CallOption) (*HideQuestionRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.HideQuestion(ctx, in, opts...)
}

func (m *defaultCrud) DeleteQuestion(ctx context.Context, in *DeleteQuestionReq, opts ...grpc.CallOption) (*DeleteQuestionRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.DeleteQuestion(ctx, in, opts...)
}

func (m *defaultCrud) PublishAnswer(ctx context.Context, in *PublishAnswerReq, opts ...grpc.CallOption) (*PublishAnswerRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.PublishAnswer(ctx, in, opts...)
}

func (m *defaultCrud) UpdateAnswer(ctx context.Context, in *UpdateAnswerReq, opts ...grpc.CallOption) (*UpdateAnswerRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.UpdateAnswer(ctx, in, opts...)
}

func (m *defaultCrud) HideAnswer(ctx context.Context, in *HideAnswerReq, opts ...grpc.CallOption) (*HideAnswerRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.HideAnswer(ctx, in, opts...)
}

func (m *defaultCrud) DeleteAnswer(ctx context.Context, in *DeleteAnswerReq, opts ...grpc.CallOption) (*DeleteAnswerRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.DeleteAnswer(ctx, in, opts...)
}
