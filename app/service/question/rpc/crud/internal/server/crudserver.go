// Code generated by goctl. DO NOT EDIT!
// Source: crud.proto

package server

import (
	"context"

	"main/app/service/question/rpc/crud/internal/logic"
	"main/app/service/question/rpc/crud/internal/svc"
	"main/app/service/question/rpc/crud/pb"
)

type CrudServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedCrudServer
}

func NewCrudServer(svcCtx *svc.ServiceContext) *CrudServer {
	return &CrudServer{
		svcCtx: svcCtx,
	}
}

func (s *CrudServer) PublishQuestion(ctx context.Context, in *pb.PublishQuestionReq) (*pb.PublishQuestionRes, error) {
	l := logic.NewPublishQuestionLogic(ctx, s.svcCtx)
	return l.PublishQuestion(in)
}

func (s *CrudServer) UpdateQuestion(ctx context.Context, in *pb.UpdateQuestionReq) (*pb.UpdateQuestionRes, error) {
	l := logic.NewUpdateQuestionLogic(ctx, s.svcCtx)
	return l.UpdateQuestion(in)
}

func (s *CrudServer) HideQuestion(ctx context.Context, in *pb.HideQuestionReq) (*pb.HideQuestionRes, error) {
	l := logic.NewHideQuestionLogic(ctx, s.svcCtx)
	return l.HideQuestion(in)
}

func (s *CrudServer) DeleteQuestion(ctx context.Context, in *pb.DeleteQuestionReq) (*pb.DeleteQuestionRes, error) {
	l := logic.NewDeleteQuestionLogic(ctx, s.svcCtx)
	return l.DeleteQuestion(in)
}

func (s *CrudServer) PublishAnswer(ctx context.Context, in *pb.PublishAnswerReq) (*pb.PublishAnswerRes, error) {
	l := logic.NewPublishAnswerLogic(ctx, s.svcCtx)
	return l.PublishAnswer(in)
}

func (s *CrudServer) UpdateAnswer(ctx context.Context, in *pb.UpdateAnswerReq) (*pb.UpdateAnswerRes, error) {
	l := logic.NewUpdateAnswerLogic(ctx, s.svcCtx)
	return l.UpdateAnswer(in)
}

func (s *CrudServer) HideAnswer(ctx context.Context, in *pb.HideAnswerReq) (*pb.HideAnswerRes, error) {
	l := logic.NewHideAnswerLogic(ctx, s.svcCtx)
	return l.HideAnswer(in)
}

func (s *CrudServer) DeleteAnswer(ctx context.Context, in *pb.DeleteAnswerReq) (*pb.DeleteAnswerRes, error) {
	l := logic.NewDeleteAnswerLogic(ctx, s.svcCtx)
	return l.DeleteAnswer(in)
}

func (s *CrudServer) ChangeAttr(ctx context.Context, in *pb.ChangeAttrReq) (*pb.ChangeAttrRes, error) {
	l := logic.NewChangeAttrLogic(ctx, s.svcCtx)
	return l.ChangeAttr(in)
}
