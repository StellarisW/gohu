// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: crud.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrudClient is the client API for Crud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrudClient interface {
	PublishQuestion(ctx context.Context, in *PublishQuestionReq, opts ...grpc.CallOption) (*PublishQuestionRes, error)
	UpdateQuestion(ctx context.Context, in *UpdateQuestionReq, opts ...grpc.CallOption) (*UpdateQuestionRes, error)
	HideQuestion(ctx context.Context, in *HideQuestionReq, opts ...grpc.CallOption) (*HideQuestionRes, error)
	DeleteQuestion(ctx context.Context, in *DeleteQuestionReq, opts ...grpc.CallOption) (*DeleteQuestionRes, error)
	PublishAnswer(ctx context.Context, in *PublishAnswerReq, opts ...grpc.CallOption) (*PublishAnswerRes, error)
	UpdateAnswer(ctx context.Context, in *UpdateAnswerReq, opts ...grpc.CallOption) (*UpdateAnswerRes, error)
	HideAnswer(ctx context.Context, in *HideAnswerReq, opts ...grpc.CallOption) (*HideAnswerRes, error)
	DeleteAnswer(ctx context.Context, in *DeleteAnswerReq, opts ...grpc.CallOption) (*DeleteAnswerRes, error)
}

type crudClient struct {
	cc grpc.ClientConnInterface
}

func NewCrudClient(cc grpc.ClientConnInterface) CrudClient {
	return &crudClient{cc}
}

func (c *crudClient) PublishQuestion(ctx context.Context, in *PublishQuestionReq, opts ...grpc.CallOption) (*PublishQuestionRes, error) {
	out := new(PublishQuestionRes)
	err := c.cc.Invoke(ctx, "/crud.Crud/PublishQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionReq, opts ...grpc.CallOption) (*UpdateQuestionRes, error) {
	out := new(UpdateQuestionRes)
	err := c.cc.Invoke(ctx, "/crud.Crud/UpdateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) HideQuestion(ctx context.Context, in *HideQuestionReq, opts ...grpc.CallOption) (*HideQuestionRes, error) {
	out := new(HideQuestionRes)
	err := c.cc.Invoke(ctx, "/crud.Crud/HideQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionReq, opts ...grpc.CallOption) (*DeleteQuestionRes, error) {
	out := new(DeleteQuestionRes)
	err := c.cc.Invoke(ctx, "/crud.Crud/DeleteQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) PublishAnswer(ctx context.Context, in *PublishAnswerReq, opts ...grpc.CallOption) (*PublishAnswerRes, error) {
	out := new(PublishAnswerRes)
	err := c.cc.Invoke(ctx, "/crud.Crud/PublishAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) UpdateAnswer(ctx context.Context, in *UpdateAnswerReq, opts ...grpc.CallOption) (*UpdateAnswerRes, error) {
	out := new(UpdateAnswerRes)
	err := c.cc.Invoke(ctx, "/crud.Crud/UpdateAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) HideAnswer(ctx context.Context, in *HideAnswerReq, opts ...grpc.CallOption) (*HideAnswerRes, error) {
	out := new(HideAnswerRes)
	err := c.cc.Invoke(ctx, "/crud.Crud/HideAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) DeleteAnswer(ctx context.Context, in *DeleteAnswerReq, opts ...grpc.CallOption) (*DeleteAnswerRes, error) {
	out := new(DeleteAnswerRes)
	err := c.cc.Invoke(ctx, "/crud.Crud/DeleteAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrudServer is the server API for Crud service.
// All implementations must embed UnimplementedCrudServer
// for forward compatibility
type CrudServer interface {
	PublishQuestion(context.Context, *PublishQuestionReq) (*PublishQuestionRes, error)
	UpdateQuestion(context.Context, *UpdateQuestionReq) (*UpdateQuestionRes, error)
	HideQuestion(context.Context, *HideQuestionReq) (*HideQuestionRes, error)
	DeleteQuestion(context.Context, *DeleteQuestionReq) (*DeleteQuestionRes, error)
	PublishAnswer(context.Context, *PublishAnswerReq) (*PublishAnswerRes, error)
	UpdateAnswer(context.Context, *UpdateAnswerReq) (*UpdateAnswerRes, error)
	HideAnswer(context.Context, *HideAnswerReq) (*HideAnswerRes, error)
	DeleteAnswer(context.Context, *DeleteAnswerReq) (*DeleteAnswerRes, error)
	mustEmbedUnimplementedCrudServer()
}

// UnimplementedCrudServer must be embedded to have forward compatible implementations.
type UnimplementedCrudServer struct {
}

func (UnimplementedCrudServer) PublishQuestion(context.Context, *PublishQuestionReq) (*PublishQuestionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishQuestion not implemented")
}
func (UnimplementedCrudServer) UpdateQuestion(context.Context, *UpdateQuestionReq) (*UpdateQuestionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedCrudServer) HideQuestion(context.Context, *HideQuestionReq) (*HideQuestionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HideQuestion not implemented")
}
func (UnimplementedCrudServer) DeleteQuestion(context.Context, *DeleteQuestionReq) (*DeleteQuestionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedCrudServer) PublishAnswer(context.Context, *PublishAnswerReq) (*PublishAnswerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishAnswer not implemented")
}
func (UnimplementedCrudServer) UpdateAnswer(context.Context, *UpdateAnswerReq) (*UpdateAnswerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnswer not implemented")
}
func (UnimplementedCrudServer) HideAnswer(context.Context, *HideAnswerReq) (*HideAnswerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HideAnswer not implemented")
}
func (UnimplementedCrudServer) DeleteAnswer(context.Context, *DeleteAnswerReq) (*DeleteAnswerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnswer not implemented")
}
func (UnimplementedCrudServer) mustEmbedUnimplementedCrudServer() {}

// UnsafeCrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrudServer will
// result in compilation errors.
type UnsafeCrudServer interface {
	mustEmbedUnimplementedCrudServer()
}

func RegisterCrudServer(s grpc.ServiceRegistrar, srv CrudServer) {
	s.RegisterService(&Crud_ServiceDesc, srv)
}

func _Crud_PublishQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).PublishQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.Crud/PublishQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).PublishQuestion(ctx, req.(*PublishQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.Crud/UpdateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).UpdateQuestion(ctx, req.(*UpdateQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_HideQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HideQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).HideQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.Crud/HideQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).HideQuestion(ctx, req.(*HideQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.Crud/DeleteQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).DeleteQuestion(ctx, req.(*DeleteQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_PublishAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishAnswerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).PublishAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.Crud/PublishAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).PublishAnswer(ctx, req.(*PublishAnswerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_UpdateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnswerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).UpdateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.Crud/UpdateAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).UpdateAnswer(ctx, req.(*UpdateAnswerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_HideAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HideAnswerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).HideAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.Crud/HideAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).HideAnswer(ctx, req.(*HideAnswerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_DeleteAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnswerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).DeleteAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.Crud/DeleteAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).DeleteAnswer(ctx, req.(*DeleteAnswerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Crud_ServiceDesc is the grpc.ServiceDesc for Crud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crud.Crud",
	HandlerType: (*CrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishQuestion",
			Handler:    _Crud_PublishQuestion_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _Crud_UpdateQuestion_Handler,
		},
		{
			MethodName: "HideQuestion",
			Handler:    _Crud_HideQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _Crud_DeleteQuestion_Handler,
		},
		{
			MethodName: "PublishAnswer",
			Handler:    _Crud_PublishAnswer_Handler,
		},
		{
			MethodName: "UpdateAnswer",
			Handler:    _Crud_UpdateAnswer_Handler,
		},
		{
			MethodName: "HideAnswer",
			Handler:    _Crud_HideAnswer_Handler,
		},
		{
			MethodName: "DeleteAnswer",
			Handler:    _Crud_DeleteAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crud.proto",
}
