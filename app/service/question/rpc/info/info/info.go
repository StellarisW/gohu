// Code generated by goctl. DO NOT EDIT!
// Source: info.proto

package info

import (
	"context"

	"main/app/service/question/rpc/info/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AnswerContent       = pb.AnswerContent
	AnswerIndex         = pb.AnswerIndex
	GetAnswerReq        = pb.GetAnswerReq
	GetAnswerRes        = pb.GetAnswerRes
	GetAnswerRes_Data   = pb.GetAnswerRes_Data
	GetQuestionReq      = pb.GetQuestionReq
	GetQuestionRes      = pb.GetQuestionRes
	GetQuestionRes_Data = pb.GetQuestionRes_Data
	QuestionContent     = pb.QuestionContent
	QuestionSubject     = pb.QuestionSubject

	Info interface {
		GetQuestion(ctx context.Context, in *GetQuestionReq, opts ...grpc.CallOption) (*GetQuestionRes, error)
		GetAnswer(ctx context.Context, in *GetAnswerReq, opts ...grpc.CallOption) (*GetAnswerRes, error)
	}

	defaultInfo struct {
		cli zrpc.Client
	}
)

func NewInfo(cli zrpc.Client) Info {
	return &defaultInfo{
		cli: cli,
	}
}

func (m *defaultInfo) GetQuestion(ctx context.Context, in *GetQuestionReq, opts ...grpc.CallOption) (*GetQuestionRes, error) {
	client := pb.NewInfoClient(m.cli.Conn())
	return client.GetQuestion(ctx, in, opts...)
}

func (m *defaultInfo) GetAnswer(ctx context.Context, in *GetAnswerReq, opts ...grpc.CallOption) (*GetAnswerRes, error) {
	client := pb.NewInfoClient(m.cli.Conn())
	return client.GetAnswer(ctx, in, opts...)
}
