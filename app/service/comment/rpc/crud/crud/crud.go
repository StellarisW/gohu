// Code generated by goctl. DO NOT EDIT!
// Source: crud.proto

package crud

import (
	"context"

	"main/app/service/comment/rpc/crud/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteCommentReq  = pb.DeleteCommentReq
	DeleteCommentRes  = pb.DeleteCommentRes
	DeleteSubjectReq  = pb.DeleteSubjectReq
	DeleteSubjectRes  = pb.DeleteSubjectRes
	InitSubjectReq    = pb.InitSubjectReq
	InitSubjectRes    = pb.InitSubjectRes
	PublishCommentReq = pb.PublishCommentReq
	PublishCommentRes = pb.PublishCommentRes
	UpdateCommentReq  = pb.UpdateCommentReq
	UpdateCommentRes  = pb.UpdateCommentRes

	Crud interface {
		InitSubject(ctx context.Context, in *InitSubjectReq, opts ...grpc.CallOption) (*InitSubjectRes, error)
		DeleteSubject(ctx context.Context, in *DeleteSubjectReq, opts ...grpc.CallOption) (*DeleteSubjectRes, error)
		PublishComment(ctx context.Context, in *PublishCommentReq, opts ...grpc.CallOption) (*PublishCommentRes, error)
		UpdateComment(ctx context.Context, in *UpdateCommentReq, opts ...grpc.CallOption) (*UpdateCommentRes, error)
		DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*DeleteCommentRes, error)
	}

	defaultCrud struct {
		cli zrpc.Client
	}
)

func NewCrud(cli zrpc.Client) Crud {
	return &defaultCrud{
		cli: cli,
	}
}

func (m *defaultCrud) InitSubject(ctx context.Context, in *InitSubjectReq, opts ...grpc.CallOption) (*InitSubjectRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.InitSubject(ctx, in, opts...)
}

func (m *defaultCrud) DeleteSubject(ctx context.Context, in *DeleteSubjectReq, opts ...grpc.CallOption) (*DeleteSubjectRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.DeleteSubject(ctx, in, opts...)
}

func (m *defaultCrud) PublishComment(ctx context.Context, in *PublishCommentReq, opts ...grpc.CallOption) (*PublishCommentRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.PublishComment(ctx, in, opts...)
}

func (m *defaultCrud) UpdateComment(ctx context.Context, in *UpdateCommentReq, opts ...grpc.CallOption) (*UpdateCommentRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.UpdateComment(ctx, in, opts...)
}

func (m *defaultCrud) DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*DeleteCommentRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.DeleteComment(ctx, in, opts...)
}
