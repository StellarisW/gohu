// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: info.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InfoClient is the client API for Info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoClient interface {
	GetCommentSubjectId(ctx context.Context, in *GetCommentSubjectIdReq, opts ...grpc.CallOption) (*GetCommentSubjectIdRes, error)
	GetCommentSubjectInfo(ctx context.Context, in *GetCommentSubjectInfoReq, opts ...grpc.CallOption) (*GetCommentSubjectInfoRes, error)
	GetCommentInfo(ctx context.Context, in *GetCommentInfoReq, opts ...grpc.CallOption) (*GetCommentInfoRes, error)
	GetCommentSubjectIndex(ctx context.Context, in *GetCommentSubjectIndexReq, opts ...grpc.CallOption) (*GetCommentSubjectIndexRes, error)
}

type infoClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoClient(cc grpc.ClientConnInterface) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) GetCommentSubjectId(ctx context.Context, in *GetCommentSubjectIdReq, opts ...grpc.CallOption) (*GetCommentSubjectIdRes, error) {
	out := new(GetCommentSubjectIdRes)
	err := c.cc.Invoke(ctx, "/info.Info/GetCommentSubjectId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) GetCommentSubjectInfo(ctx context.Context, in *GetCommentSubjectInfoReq, opts ...grpc.CallOption) (*GetCommentSubjectInfoRes, error) {
	out := new(GetCommentSubjectInfoRes)
	err := c.cc.Invoke(ctx, "/info.Info/GetCommentSubjectInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) GetCommentInfo(ctx context.Context, in *GetCommentInfoReq, opts ...grpc.CallOption) (*GetCommentInfoRes, error) {
	out := new(GetCommentInfoRes)
	err := c.cc.Invoke(ctx, "/info.Info/GetCommentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) GetCommentSubjectIndex(ctx context.Context, in *GetCommentSubjectIndexReq, opts ...grpc.CallOption) (*GetCommentSubjectIndexRes, error) {
	out := new(GetCommentSubjectIndexRes)
	err := c.cc.Invoke(ctx, "/info.Info/GetCommentSubjectIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServer is the server API for Info service.
// All implementations must embed UnimplementedInfoServer
// for forward compatibility
type InfoServer interface {
	GetCommentSubjectId(context.Context, *GetCommentSubjectIdReq) (*GetCommentSubjectIdRes, error)
	GetCommentSubjectInfo(context.Context, *GetCommentSubjectInfoReq) (*GetCommentSubjectInfoRes, error)
	GetCommentInfo(context.Context, *GetCommentInfoReq) (*GetCommentInfoRes, error)
	GetCommentSubjectIndex(context.Context, *GetCommentSubjectIndexReq) (*GetCommentSubjectIndexRes, error)
	mustEmbedUnimplementedInfoServer()
}

// UnimplementedInfoServer must be embedded to have forward compatible implementations.
type UnimplementedInfoServer struct {
}

func (UnimplementedInfoServer) GetCommentSubjectId(context.Context, *GetCommentSubjectIdReq) (*GetCommentSubjectIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentSubjectId not implemented")
}
func (UnimplementedInfoServer) GetCommentSubjectInfo(context.Context, *GetCommentSubjectInfoReq) (*GetCommentSubjectInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentSubjectInfo not implemented")
}
func (UnimplementedInfoServer) GetCommentInfo(context.Context, *GetCommentInfoReq) (*GetCommentInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentInfo not implemented")
}
func (UnimplementedInfoServer) GetCommentSubjectIndex(context.Context, *GetCommentSubjectIndexReq) (*GetCommentSubjectIndexRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentSubjectIndex not implemented")
}
func (UnimplementedInfoServer) mustEmbedUnimplementedInfoServer() {}

// UnsafeInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoServer will
// result in compilation errors.
type UnsafeInfoServer interface {
	mustEmbedUnimplementedInfoServer()
}

func RegisterInfoServer(s grpc.ServiceRegistrar, srv InfoServer) {
	s.RegisterService(&Info_ServiceDesc, srv)
}

func _Info_GetCommentSubjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentSubjectIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetCommentSubjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info.Info/GetCommentSubjectId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetCommentSubjectId(ctx, req.(*GetCommentSubjectIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_GetCommentSubjectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentSubjectInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetCommentSubjectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info.Info/GetCommentSubjectInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetCommentSubjectInfo(ctx, req.(*GetCommentSubjectInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_GetCommentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetCommentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info.Info/GetCommentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetCommentInfo(ctx, req.(*GetCommentInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_GetCommentSubjectIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentSubjectIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetCommentSubjectIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info.Info/GetCommentSubjectIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetCommentSubjectIndex(ctx, req.(*GetCommentSubjectIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Info_ServiceDesc is the grpc.ServiceDesc for Info service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Info_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "info.Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommentSubjectId",
			Handler:    _Info_GetCommentSubjectId_Handler,
		},
		{
			MethodName: "GetCommentSubjectInfo",
			Handler:    _Info_GetCommentSubjectInfo_Handler,
		},
		{
			MethodName: "GetCommentInfo",
			Handler:    _Info_GetCommentInfo_Handler,
		},
		{
			MethodName: "GetCommentSubjectIndex",
			Handler:    _Info_GetCommentSubjectIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "info.proto",
}
