// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: info.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InfoClient is the client API for Info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoClient interface {
	GetCommentSubject(ctx context.Context, in *GetCommentSubjectReq, opts ...grpc.CallOption) (*GetCommentSubjectRes, error)
	GetCommentIndex(ctx context.Context, in *GetCommentIndexReq, opts ...grpc.CallOption) (*GetCommentIndexRes, error)
	GetCommentSubjectIndex(ctx context.Context, in *GetCommentSubjectIndexReq, opts ...grpc.CallOption) (*GetCommentSubjectIndexRes, error)
}

type infoClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoClient(cc grpc.ClientConnInterface) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) GetCommentSubject(ctx context.Context, in *GetCommentSubjectReq, opts ...grpc.CallOption) (*GetCommentSubjectRes, error) {
	out := new(GetCommentSubjectRes)
	err := c.cc.Invoke(ctx, "/info.Info/GetCommentSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) GetCommentIndex(ctx context.Context, in *GetCommentIndexReq, opts ...grpc.CallOption) (*GetCommentIndexRes, error) {
	out := new(GetCommentIndexRes)
	err := c.cc.Invoke(ctx, "/info.Info/GetCommentIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) GetCommentSubjectIndex(ctx context.Context, in *GetCommentSubjectIndexReq, opts ...grpc.CallOption) (*GetCommentSubjectIndexRes, error) {
	out := new(GetCommentSubjectIndexRes)
	err := c.cc.Invoke(ctx, "/info.Info/GetCommentSubjectIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServer is the server API for Info service.
// All implementations must embed UnimplementedInfoServer
// for forward compatibility
type InfoServer interface {
	GetCommentSubject(context.Context, *GetCommentSubjectReq) (*GetCommentSubjectRes, error)
	GetCommentIndex(context.Context, *GetCommentIndexReq) (*GetCommentIndexRes, error)
	GetCommentSubjectIndex(context.Context, *GetCommentSubjectIndexReq) (*GetCommentSubjectIndexRes, error)
	mustEmbedUnimplementedInfoServer()
}

// UnimplementedInfoServer must be embedded to have forward compatible implementations.
type UnimplementedInfoServer struct {
}

func (UnimplementedInfoServer) GetCommentSubject(context.Context, *GetCommentSubjectReq) (*GetCommentSubjectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentSubject not implemented")
}
func (UnimplementedInfoServer) GetCommentIndex(context.Context, *GetCommentIndexReq) (*GetCommentIndexRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentIndex not implemented")
}
func (UnimplementedInfoServer) GetCommentSubjectIndex(context.Context, *GetCommentSubjectIndexReq) (*GetCommentSubjectIndexRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentSubjectIndex not implemented")
}
func (UnimplementedInfoServer) mustEmbedUnimplementedInfoServer() {}

// UnsafeInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoServer will
// result in compilation errors.
type UnsafeInfoServer interface {
	mustEmbedUnimplementedInfoServer()
}

func RegisterInfoServer(s grpc.ServiceRegistrar, srv InfoServer) {
	s.RegisterService(&Info_ServiceDesc, srv)
}

func _Info_GetCommentSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentSubjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetCommentSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info.Info/GetCommentSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetCommentSubject(ctx, req.(*GetCommentSubjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_GetCommentIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetCommentIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info.Info/GetCommentIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetCommentIndex(ctx, req.(*GetCommentIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_GetCommentSubjectIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentSubjectIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetCommentSubjectIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info.Info/GetCommentSubjectIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetCommentSubjectIndex(ctx, req.(*GetCommentSubjectIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Info_ServiceDesc is the grpc.ServiceDesc for Info service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Info_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "info.Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommentSubject",
			Handler:    _Info_GetCommentSubject_Handler,
		},
		{
			MethodName: "GetCommentIndex",
			Handler:    _Info_GetCommentIndex_Handler,
		},
		{
			MethodName: "GetCommentSubjectIndex",
			Handler:    _Info_GetCommentSubjectIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "info.proto",
}
