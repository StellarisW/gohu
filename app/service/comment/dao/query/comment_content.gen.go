// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"main/dao/model"
)

func newCommentContent(db *gorm.DB) commentContent {
	_commentContent := commentContent{}

	_commentContent.commentContentDo.UseDB(db)
	_commentContent.commentContentDo.UseModel(&model.CommentContent{})

	tableName := _commentContent.commentContentDo.TableName()
	_commentContent.ALL = field.NewField(tableName, "*")
	_commentContent.CommentID = field.NewInt64(tableName, "comment_id")
	_commentContent.Content = field.NewString(tableName, "content")
	_commentContent.Meta = field.NewString(tableName, "meta")
	_commentContent.CreateTime = field.NewTime(tableName, "create_time")
	_commentContent.UpdateTime = field.NewTime(tableName, "update_time")

	_commentContent.fillFieldMap()

	return _commentContent
}

type commentContent struct {
	commentContentDo commentContentDo

	ALL        field.Field
	CommentID  field.Int64
	Content    field.String
	Meta       field.String
	CreateTime field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (c commentContent) Table(newTableName string) *commentContent {
	c.commentContentDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c commentContent) As(alias string) *commentContent {
	c.commentContentDo.DO = *(c.commentContentDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *commentContent) updateTableName(table string) *commentContent {
	c.ALL = field.NewField(table, "*")
	c.CommentID = field.NewInt64(table, "comment_id")
	c.Content = field.NewString(table, "content")
	c.Meta = field.NewString(table, "meta")
	c.CreateTime = field.NewTime(table, "create_time")
	c.UpdateTime = field.NewTime(table, "update_time")

	c.fillFieldMap()

	return c
}

func (c *commentContent) WithContext(ctx context.Context) *commentContentDo {
	return c.commentContentDo.WithContext(ctx)
}

func (c commentContent) TableName() string { return c.commentContentDo.TableName() }

func (c commentContent) Alias() string { return c.commentContentDo.Alias() }

func (c *commentContent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *commentContent) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["comment_id"] = c.CommentID
	c.fieldMap["content"] = c.Content
	c.fieldMap["meta"] = c.Meta
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_time"] = c.UpdateTime
}

func (c commentContent) clone(db *gorm.DB) commentContent {
	c.commentContentDo.ReplaceDB(db)
	return c
}

type commentContentDo struct{ gen.DO }

func (c commentContentDo) Debug() *commentContentDo {
	return c.withDO(c.DO.Debug())
}

func (c commentContentDo) WithContext(ctx context.Context) *commentContentDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c commentContentDo) ReadDB() *commentContentDo {
	return c.Clauses(dbresolver.Read)
}

func (c commentContentDo) WriteDB() *commentContentDo {
	return c.Clauses(dbresolver.Write)
}

func (c commentContentDo) Clauses(conds ...clause.Expression) *commentContentDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c commentContentDo) Returning(value interface{}, columns ...string) *commentContentDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c commentContentDo) Not(conds ...gen.Condition) *commentContentDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c commentContentDo) Or(conds ...gen.Condition) *commentContentDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c commentContentDo) Select(conds ...field.Expr) *commentContentDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c commentContentDo) Where(conds ...gen.Condition) *commentContentDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c commentContentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *commentContentDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c commentContentDo) Order(conds ...field.Expr) *commentContentDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c commentContentDo) Distinct(cols ...field.Expr) *commentContentDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c commentContentDo) Omit(cols ...field.Expr) *commentContentDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c commentContentDo) Join(table schema.Tabler, on ...field.Expr) *commentContentDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c commentContentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *commentContentDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c commentContentDo) RightJoin(table schema.Tabler, on ...field.Expr) *commentContentDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c commentContentDo) Group(cols ...field.Expr) *commentContentDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c commentContentDo) Having(conds ...gen.Condition) *commentContentDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c commentContentDo) Limit(limit int) *commentContentDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c commentContentDo) Offset(offset int) *commentContentDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c commentContentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *commentContentDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c commentContentDo) Unscoped() *commentContentDo {
	return c.withDO(c.DO.Unscoped())
}

func (c commentContentDo) Create(values ...*model.CommentContent) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c commentContentDo) CreateInBatches(values []*model.CommentContent, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c commentContentDo) Save(values ...*model.CommentContent) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c commentContentDo) First() (*model.CommentContent, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentContent), nil
	}
}

func (c commentContentDo) Take() (*model.CommentContent, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentContent), nil
	}
}

func (c commentContentDo) Last() (*model.CommentContent, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentContent), nil
	}
}

func (c commentContentDo) Find() ([]*model.CommentContent, error) {
	result, err := c.DO.Find()
	return result.([]*model.CommentContent), err
}

func (c commentContentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommentContent, err error) {
	buf := make([]*model.CommentContent, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c commentContentDo) FindInBatches(result *[]*model.CommentContent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c commentContentDo) Attrs(attrs ...field.AssignExpr) *commentContentDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c commentContentDo) Assign(attrs ...field.AssignExpr) *commentContentDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c commentContentDo) Joins(fields ...field.RelationField) *commentContentDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c commentContentDo) Preload(fields ...field.RelationField) *commentContentDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c commentContentDo) FirstOrInit() (*model.CommentContent, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentContent), nil
	}
}

func (c commentContentDo) FirstOrCreate() (*model.CommentContent, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentContent), nil
	}
}

func (c commentContentDo) FindByPage(offset int, limit int) (result []*model.CommentContent, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c commentContentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c commentContentDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c *commentContentDo) withDO(do gen.Dao) *commentContentDo {
	c.DO = *do.(*gen.DO)
	return c
}
