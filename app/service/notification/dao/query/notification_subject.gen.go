// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"main/app/service/notification/dao/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newNotificationSubject(db *gorm.DB) notificationSubject {
	_notificationSubject := notificationSubject{}

	_notificationSubject.notificationSubjectDo.UseDB(db)
	_notificationSubject.notificationSubjectDo.UseModel(&model.NotificationSubject{})

	tableName := _notificationSubject.notificationSubjectDo.TableName()
	_notificationSubject.ALL = field.NewField(tableName, "*")
	_notificationSubject.ID = field.NewInt64(tableName, "id")
	_notificationSubject.UserID = field.NewInt64(tableName, "user_id")
	_notificationSubject.MessageType = field.NewInt32(tableName, "message_type")
	_notificationSubject.CreateTime = field.NewTime(tableName, "create_time")
	_notificationSubject.UpdateTime = field.NewTime(tableName, "update_time")

	_notificationSubject.fillFieldMap()

	return _notificationSubject
}

type notificationSubject struct {
	notificationSubjectDo notificationSubjectDo

	ALL         field.Field
	ID          field.Int64
	UserID      field.Int64
	MessageType field.Int32
	CreateTime  field.Time
	UpdateTime  field.Time

	fieldMap map[string]field.Expr
}

func (n notificationSubject) Table(newTableName string) *notificationSubject {
	n.notificationSubjectDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n notificationSubject) As(alias string) *notificationSubject {
	n.notificationSubjectDo.DO = *(n.notificationSubjectDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *notificationSubject) updateTableName(table string) *notificationSubject {
	n.ALL = field.NewField(table, "*")
	n.ID = field.NewInt64(table, "id")
	n.UserID = field.NewInt64(table, "user_id")
	n.MessageType = field.NewInt32(table, "message_type")
	n.CreateTime = field.NewTime(table, "create_time")
	n.UpdateTime = field.NewTime(table, "update_time")

	n.fillFieldMap()

	return n
}

func (n *notificationSubject) WithContext(ctx context.Context) *notificationSubjectDo {
	return n.notificationSubjectDo.WithContext(ctx)
}

func (n notificationSubject) TableName() string { return n.notificationSubjectDo.TableName() }

func (n notificationSubject) Alias() string { return n.notificationSubjectDo.Alias() }

func (n *notificationSubject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *notificationSubject) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 5)
	n.fieldMap["id"] = n.ID
	n.fieldMap["user_id"] = n.UserID
	n.fieldMap["message_type"] = n.MessageType
	n.fieldMap["create_time"] = n.CreateTime
	n.fieldMap["update_time"] = n.UpdateTime
}

func (n notificationSubject) clone(db *gorm.DB) notificationSubject {
	n.notificationSubjectDo.ReplaceDB(db)
	return n
}

type notificationSubjectDo struct{ gen.DO }

func (n notificationSubjectDo) Debug() *notificationSubjectDo {
	return n.withDO(n.DO.Debug())
}

func (n notificationSubjectDo) WithContext(ctx context.Context) *notificationSubjectDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n notificationSubjectDo) ReadDB() *notificationSubjectDo {
	return n.Clauses(dbresolver.Read)
}

func (n notificationSubjectDo) WriteDB() *notificationSubjectDo {
	return n.Clauses(dbresolver.Write)
}

func (n notificationSubjectDo) Clauses(conds ...clause.Expression) *notificationSubjectDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n notificationSubjectDo) Returning(value interface{}, columns ...string) *notificationSubjectDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n notificationSubjectDo) Not(conds ...gen.Condition) *notificationSubjectDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n notificationSubjectDo) Or(conds ...gen.Condition) *notificationSubjectDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n notificationSubjectDo) Select(conds ...field.Expr) *notificationSubjectDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n notificationSubjectDo) Where(conds ...gen.Condition) *notificationSubjectDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n notificationSubjectDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *notificationSubjectDo {
	return n.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (n notificationSubjectDo) Order(conds ...field.Expr) *notificationSubjectDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n notificationSubjectDo) Distinct(cols ...field.Expr) *notificationSubjectDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n notificationSubjectDo) Omit(cols ...field.Expr) *notificationSubjectDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n notificationSubjectDo) Join(table schema.Tabler, on ...field.Expr) *notificationSubjectDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n notificationSubjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) *notificationSubjectDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n notificationSubjectDo) RightJoin(table schema.Tabler, on ...field.Expr) *notificationSubjectDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n notificationSubjectDo) Group(cols ...field.Expr) *notificationSubjectDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n notificationSubjectDo) Having(conds ...gen.Condition) *notificationSubjectDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n notificationSubjectDo) Limit(limit int) *notificationSubjectDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n notificationSubjectDo) Offset(offset int) *notificationSubjectDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n notificationSubjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *notificationSubjectDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n notificationSubjectDo) Unscoped() *notificationSubjectDo {
	return n.withDO(n.DO.Unscoped())
}

func (n notificationSubjectDo) Create(values ...*model.NotificationSubject) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n notificationSubjectDo) CreateInBatches(values []*model.NotificationSubject, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n notificationSubjectDo) Save(values ...*model.NotificationSubject) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n notificationSubjectDo) First() (*model.NotificationSubject, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationSubject), nil
	}
}

func (n notificationSubjectDo) Take() (*model.NotificationSubject, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationSubject), nil
	}
}

func (n notificationSubjectDo) Last() (*model.NotificationSubject, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationSubject), nil
	}
}

func (n notificationSubjectDo) Find() ([]*model.NotificationSubject, error) {
	result, err := n.DO.Find()
	return result.([]*model.NotificationSubject), err
}

func (n notificationSubjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NotificationSubject, err error) {
	buf := make([]*model.NotificationSubject, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n notificationSubjectDo) FindInBatches(result *[]*model.NotificationSubject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n notificationSubjectDo) Attrs(attrs ...field.AssignExpr) *notificationSubjectDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n notificationSubjectDo) Assign(attrs ...field.AssignExpr) *notificationSubjectDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n notificationSubjectDo) Joins(fields ...field.RelationField) *notificationSubjectDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n notificationSubjectDo) Preload(fields ...field.RelationField) *notificationSubjectDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n notificationSubjectDo) FirstOrInit() (*model.NotificationSubject, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationSubject), nil
	}
}

func (n notificationSubjectDo) FirstOrCreate() (*model.NotificationSubject, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationSubject), nil
	}
}

func (n notificationSubjectDo) FindByPage(offset int, limit int) (result []*model.NotificationSubject, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n notificationSubjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n notificationSubjectDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n *notificationSubjectDo) withDO(do gen.Dao) *notificationSubjectDo {
	n.DO = *do.(*gen.DO)
	return n
}
