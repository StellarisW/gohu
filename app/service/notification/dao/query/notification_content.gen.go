// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"main/app/service/notification/dao/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newNotificationContent(db *gorm.DB) notificationContent {
	_notificationContent := notificationContent{}

	_notificationContent.notificationContentDo.UseDB(db)
	_notificationContent.notificationContentDo.UseModel(&model.NotificationContent{})

	tableName := _notificationContent.notificationContentDo.TableName()
	_notificationContent.ALL = field.NewField(tableName, "*")
	_notificationContent.SubjectID = field.NewInt64(tableName, "subject_id")
	_notificationContent.Title = field.NewString(tableName, "title")
	_notificationContent.Content = field.NewString(tableName, "content")
	_notificationContent.URL = field.NewString(tableName, "url")
	_notificationContent.Meta = field.NewString(tableName, "meta")
	_notificationContent.Attrs = field.NewInt32(tableName, "attrs")
	_notificationContent.CreateTime = field.NewTime(tableName, "create_time")
	_notificationContent.UpdateTime = field.NewTime(tableName, "update_time")

	_notificationContent.fillFieldMap()

	return _notificationContent
}

type notificationContent struct {
	notificationContentDo notificationContentDo

	ALL        field.Field
	SubjectID  field.Int64
	Title      field.String
	Content    field.String
	URL        field.String
	Meta       field.String
	Attrs      field.Int32
	CreateTime field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (n notificationContent) Table(newTableName string) *notificationContent {
	n.notificationContentDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n notificationContent) As(alias string) *notificationContent {
	n.notificationContentDo.DO = *(n.notificationContentDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *notificationContent) updateTableName(table string) *notificationContent {
	n.ALL = field.NewField(table, "*")
	n.SubjectID = field.NewInt64(table, "subject_id")
	n.Title = field.NewString(table, "title")
	n.Content = field.NewString(table, "content")
	n.URL = field.NewString(table, "url")
	n.Meta = field.NewString(table, "meta")
	n.Attrs = field.NewInt32(table, "attrs")
	n.CreateTime = field.NewTime(table, "create_time")
	n.UpdateTime = field.NewTime(table, "update_time")

	n.fillFieldMap()

	return n
}

func (n *notificationContent) WithContext(ctx context.Context) *notificationContentDo {
	return n.notificationContentDo.WithContext(ctx)
}

func (n notificationContent) TableName() string { return n.notificationContentDo.TableName() }

func (n notificationContent) Alias() string { return n.notificationContentDo.Alias() }

func (n *notificationContent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *notificationContent) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 8)
	n.fieldMap["subject_id"] = n.SubjectID
	n.fieldMap["title"] = n.Title
	n.fieldMap["content"] = n.Content
	n.fieldMap["url"] = n.URL
	n.fieldMap["meta"] = n.Meta
	n.fieldMap["attrs"] = n.Attrs
	n.fieldMap["create_time"] = n.CreateTime
	n.fieldMap["update_time"] = n.UpdateTime
}

func (n notificationContent) clone(db *gorm.DB) notificationContent {
	n.notificationContentDo.ReplaceDB(db)
	return n
}

type notificationContentDo struct{ gen.DO }

func (n notificationContentDo) Debug() *notificationContentDo {
	return n.withDO(n.DO.Debug())
}

func (n notificationContentDo) WithContext(ctx context.Context) *notificationContentDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n notificationContentDo) ReadDB() *notificationContentDo {
	return n.Clauses(dbresolver.Read)
}

func (n notificationContentDo) WriteDB() *notificationContentDo {
	return n.Clauses(dbresolver.Write)
}

func (n notificationContentDo) Clauses(conds ...clause.Expression) *notificationContentDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n notificationContentDo) Returning(value interface{}, columns ...string) *notificationContentDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n notificationContentDo) Not(conds ...gen.Condition) *notificationContentDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n notificationContentDo) Or(conds ...gen.Condition) *notificationContentDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n notificationContentDo) Select(conds ...field.Expr) *notificationContentDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n notificationContentDo) Where(conds ...gen.Condition) *notificationContentDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n notificationContentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *notificationContentDo {
	return n.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (n notificationContentDo) Order(conds ...field.Expr) *notificationContentDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n notificationContentDo) Distinct(cols ...field.Expr) *notificationContentDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n notificationContentDo) Omit(cols ...field.Expr) *notificationContentDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n notificationContentDo) Join(table schema.Tabler, on ...field.Expr) *notificationContentDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n notificationContentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *notificationContentDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n notificationContentDo) RightJoin(table schema.Tabler, on ...field.Expr) *notificationContentDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n notificationContentDo) Group(cols ...field.Expr) *notificationContentDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n notificationContentDo) Having(conds ...gen.Condition) *notificationContentDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n notificationContentDo) Limit(limit int) *notificationContentDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n notificationContentDo) Offset(offset int) *notificationContentDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n notificationContentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *notificationContentDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n notificationContentDo) Unscoped() *notificationContentDo {
	return n.withDO(n.DO.Unscoped())
}

func (n notificationContentDo) Create(values ...*model.NotificationContent) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n notificationContentDo) CreateInBatches(values []*model.NotificationContent, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n notificationContentDo) Save(values ...*model.NotificationContent) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n notificationContentDo) First() (*model.NotificationContent, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationContent), nil
	}
}

func (n notificationContentDo) Take() (*model.NotificationContent, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationContent), nil
	}
}

func (n notificationContentDo) Last() (*model.NotificationContent, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationContent), nil
	}
}

func (n notificationContentDo) Find() ([]*model.NotificationContent, error) {
	result, err := n.DO.Find()
	return result.([]*model.NotificationContent), err
}

func (n notificationContentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NotificationContent, err error) {
	buf := make([]*model.NotificationContent, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n notificationContentDo) FindInBatches(result *[]*model.NotificationContent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n notificationContentDo) Attrs(attrs ...field.AssignExpr) *notificationContentDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n notificationContentDo) Assign(attrs ...field.AssignExpr) *notificationContentDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n notificationContentDo) Joins(fields ...field.RelationField) *notificationContentDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n notificationContentDo) Preload(fields ...field.RelationField) *notificationContentDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n notificationContentDo) FirstOrInit() (*model.NotificationContent, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationContent), nil
	}
}

func (n notificationContentDo) FirstOrCreate() (*model.NotificationContent, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationContent), nil
	}
}

func (n notificationContentDo) FindByPage(offset int, limit int) (result []*model.NotificationContent, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n notificationContentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n notificationContentDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n *notificationContentDo) withDO(do gen.Dao) *notificationContentDo {
	n.DO = *do.(*gen.DO)
	return n
}
