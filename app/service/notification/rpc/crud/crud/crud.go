// Code generated by goctl. DO NOT EDIT!
// Source: crud.proto

package crud

import (
	"context"

	"main/app/service/notification/rpc/crud/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteNotificationReq  = pb.DeleteNotificationReq
	DeleteNotificationRes  = pb.DeleteNotificationRes
	PublishNotificationReq = pb.PublishNotificationReq
	PublishNotificationRes = pb.PublishNotificationRes

	Crud interface {
		PublishNotification(ctx context.Context, in *PublishNotificationReq, opts ...grpc.CallOption) (*PublishNotificationRes, error)
		DeleteNotification(ctx context.Context, in *DeleteNotificationReq, opts ...grpc.CallOption) (*DeleteNotificationRes, error)
	}

	defaultCrud struct {
		cli zrpc.Client
	}
)

func NewCrud(cli zrpc.Client) Crud {
	return &defaultCrud{
		cli: cli,
	}
}

func (m *defaultCrud) PublishNotification(ctx context.Context, in *PublishNotificationReq, opts ...grpc.CallOption) (*PublishNotificationRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.PublishNotification(ctx, in, opts...)
}

func (m *defaultCrud) DeleteNotification(ctx context.Context, in *DeleteNotificationReq, opts ...grpc.CallOption) (*DeleteNotificationRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.DeleteNotification(ctx, in, opts...)
}
