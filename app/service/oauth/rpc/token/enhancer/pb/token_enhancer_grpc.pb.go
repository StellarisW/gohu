// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: token_enhancer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenEnhancerClient is the client API for TokenEnhancer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenEnhancerClient interface {
	CreateAccessToken(ctx context.Context, in *CreateAccessTokenReq, opts ...grpc.CallOption) (*CreateAccessTokenRes, error)
	RefreshAccessToken(ctx context.Context, in *RefreshAccessTokenReq, opts ...grpc.CallOption) (*RefreshAccessTokenRes, error)
	ReadOauthToken(ctx context.Context, in *ReadTokenReq, opts ...grpc.CallOption) (*ReadTokenRes, error)
	GetUserDetails(ctx context.Context, in *GetUserDetailsReq, opts ...grpc.CallOption) (*GetUserDetailsRes, error)
}

type tokenEnhancerClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenEnhancerClient(cc grpc.ClientConnInterface) TokenEnhancerClient {
	return &tokenEnhancerClient{cc}
}

func (c *tokenEnhancerClient) CreateAccessToken(ctx context.Context, in *CreateAccessTokenReq, opts ...grpc.CallOption) (*CreateAccessTokenRes, error) {
	out := new(CreateAccessTokenRes)
	err := c.cc.Invoke(ctx, "/enhancer.TokenEnhancer/CreateAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenEnhancerClient) RefreshAccessToken(ctx context.Context, in *RefreshAccessTokenReq, opts ...grpc.CallOption) (*RefreshAccessTokenRes, error) {
	out := new(RefreshAccessTokenRes)
	err := c.cc.Invoke(ctx, "/enhancer.TokenEnhancer/RefreshAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenEnhancerClient) ReadOauthToken(ctx context.Context, in *ReadTokenReq, opts ...grpc.CallOption) (*ReadTokenRes, error) {
	out := new(ReadTokenRes)
	err := c.cc.Invoke(ctx, "/enhancer.TokenEnhancer/ReadOauthToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenEnhancerClient) GetUserDetails(ctx context.Context, in *GetUserDetailsReq, opts ...grpc.CallOption) (*GetUserDetailsRes, error) {
	out := new(GetUserDetailsRes)
	err := c.cc.Invoke(ctx, "/enhancer.TokenEnhancer/GetUserDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenEnhancerServer is the server API for TokenEnhancer service.
// All implementations must embed UnimplementedTokenEnhancerServer
// for forward compatibility
type TokenEnhancerServer interface {
	CreateAccessToken(context.Context, *CreateAccessTokenReq) (*CreateAccessTokenRes, error)
	RefreshAccessToken(context.Context, *RefreshAccessTokenReq) (*RefreshAccessTokenRes, error)
	ReadOauthToken(context.Context, *ReadTokenReq) (*ReadTokenRes, error)
	GetUserDetails(context.Context, *GetUserDetailsReq) (*GetUserDetailsRes, error)
	mustEmbedUnimplementedTokenEnhancerServer()
}

// UnimplementedTokenEnhancerServer must be embedded to have forward compatible implementations.
type UnimplementedTokenEnhancerServer struct {
}

func (UnimplementedTokenEnhancerServer) CreateAccessToken(context.Context, *CreateAccessTokenReq) (*CreateAccessTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessToken not implemented")
}
func (UnimplementedTokenEnhancerServer) RefreshAccessToken(context.Context, *RefreshAccessTokenReq) (*RefreshAccessTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshAccessToken not implemented")
}
func (UnimplementedTokenEnhancerServer) ReadOauthToken(context.Context, *ReadTokenReq) (*ReadTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOauthToken not implemented")
}
func (UnimplementedTokenEnhancerServer) GetUserDetails(context.Context, *GetUserDetailsReq) (*GetUserDetailsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetails not implemented")
}
func (UnimplementedTokenEnhancerServer) mustEmbedUnimplementedTokenEnhancerServer() {}

// UnsafeTokenEnhancerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenEnhancerServer will
// result in compilation errors.
type UnsafeTokenEnhancerServer interface {
	mustEmbedUnimplementedTokenEnhancerServer()
}

func RegisterTokenEnhancerServer(s grpc.ServiceRegistrar, srv TokenEnhancerServer) {
	s.RegisterService(&TokenEnhancer_ServiceDesc, srv)
}

func _TokenEnhancer_CreateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenEnhancerServer).CreateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enhancer.TokenEnhancer/CreateAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenEnhancerServer).CreateAccessToken(ctx, req.(*CreateAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenEnhancer_RefreshAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenEnhancerServer).RefreshAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enhancer.TokenEnhancer/RefreshAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenEnhancerServer).RefreshAccessToken(ctx, req.(*RefreshAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenEnhancer_ReadOauthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenEnhancerServer).ReadOauthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enhancer.TokenEnhancer/ReadOauthToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenEnhancerServer).ReadOauthToken(ctx, req.(*ReadTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenEnhancer_GetUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenEnhancerServer).GetUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enhancer.TokenEnhancer/GetUserDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenEnhancerServer).GetUserDetails(ctx, req.(*GetUserDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenEnhancer_ServiceDesc is the grpc.ServiceDesc for TokenEnhancer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenEnhancer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enhancer.TokenEnhancer",
	HandlerType: (*TokenEnhancerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccessToken",
			Handler:    _TokenEnhancer_CreateAccessToken_Handler,
		},
		{
			MethodName: "RefreshAccessToken",
			Handler:    _TokenEnhancer_RefreshAccessToken_Handler,
		},
		{
			MethodName: "ReadOauthToken",
			Handler:    _TokenEnhancer_ReadOauthToken_Handler,
		},
		{
			MethodName: "GetUserDetails",
			Handler:    _TokenEnhancer_GetUserDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token_enhancer.proto",
}
