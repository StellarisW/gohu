syntax = "proto3";
package enhancer;
option go_package = "./pb";

message ClientDetails{
    string client_id=1;
    int64 access_token_validity_seconds=2;
    int64 refresh_token_validity_seconds=3;
    string registered_redirect_uri=4;
    repeated string authorized_grant_types=5;
}
message UserDetails{
    int64 user_id=1;
    string username=2;
    string nickname=3;
    string last_ip=4;
    int32 vip=5;
    int32 status=6;
    string update_time=7;
    string create_time=8;
    repeated string authorities=9;
}
message OAuth2Details{
    ClientDetails client=1;
    UserDetails user=2;
    string issuer=3;
}

message OAuth2Token{
    OAuth2Token refresh_token=1;
    string token_type=2;
    string token_value=3;
    int64 expires_at=4;
}


// 根据用户认证生成访问令牌
message CreateAccessTokenReq{
    OAuth2Details oauth2_details=1;
}

message CreateAccessTokenRes{
    int32 code=1;
    string msg=2;
    bool ok=3;
    Data data=4;
    message Data{
        OAuth2Token access_token=1;
    }
}

// 根据刷新令牌生成访问令牌
message RefreshAccessTokenReq{
    string refresh_token=1;
}

message RefreshAccessTokenRes{
    int32 code=1;
    string msg=2;
    bool ok=3;
    Data data=4;
    message Data{
        OAuth2Token access_token=1;
    }
}

// 访问令牌结构体
message ReadTokenReq{
    string oauth_token=1;
}

message ReadTokenRes{
    int32 code=1;
    string msg=2;
    bool ok=3;
    Data data=4;
    message Data{
        OAuth2Token access_token=1;
    }
}


// 获取令牌对应的用户信息
message GetUserDetailsReq{
    string access_token=1;
}

message GetUserDetailsRes{
    int32 code=1;
    string msg=2;
    bool ok=3;
    Data data=4;
    message Data{
        UserDetails user_details=1;
    }
}

// 获取令牌对应的客户端信息

service TokenEnhancer{
    rpc CreateAccessToken(CreateAccessTokenReq) returns(CreateAccessTokenRes);
    rpc RefreshAccessToken(RefreshAccessTokenReq) returns(RefreshAccessTokenRes);
    rpc ReadOauthToken(ReadTokenReq) returns(ReadTokenRes);
    rpc GetUserDetails(GetUserDetailsReq) returns(GetUserDetailsRes);
}