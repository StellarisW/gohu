// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"main/app/service/user/dao/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserSubscribe(db *gorm.DB) userSubscribe {
	_userSubscribe := userSubscribe{}

	_userSubscribe.userSubscribeDo.UseDB(db)
	_userSubscribe.userSubscribeDo.UseModel(&model.UserSubscribe{})

	tableName := _userSubscribe.userSubscribeDo.TableName()
	_userSubscribe.ALL = field.NewField(tableName, "*")
	_userSubscribe.ID = field.NewInt64(tableName, "id")
	_userSubscribe.UserID = field.NewInt64(tableName, "user_id")
	_userSubscribe.ObjType = field.NewInt32(tableName, "obj_type")
	_userSubscribe.ObjID = field.NewInt64(tableName, "obj_id")
	_userSubscribe.CreateTime = field.NewTime(tableName, "create_time")
	_userSubscribe.UpdateTime = field.NewTime(tableName, "update_time")

	_userSubscribe.fillFieldMap()

	return _userSubscribe
}

type userSubscribe struct {
	userSubscribeDo userSubscribeDo

	ALL        field.Field
	ID         field.Int64
	UserID     field.Int64
	ObjType    field.Int32
	ObjID      field.Int64
	CreateTime field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (u userSubscribe) Table(newTableName string) *userSubscribe {
	u.userSubscribeDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userSubscribe) As(alias string) *userSubscribe {
	u.userSubscribeDo.DO = *(u.userSubscribeDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userSubscribe) updateTableName(table string) *userSubscribe {
	u.ALL = field.NewField(table, "*")
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.ObjType = field.NewInt32(table, "obj_type")
	u.ObjID = field.NewInt64(table, "obj_id")
	u.CreateTime = field.NewTime(table, "create_time")
	u.UpdateTime = field.NewTime(table, "update_time")

	u.fillFieldMap()

	return u
}

func (u *userSubscribe) WithContext(ctx context.Context) *userSubscribeDo {
	return u.userSubscribeDo.WithContext(ctx)
}

func (u userSubscribe) TableName() string { return u.userSubscribeDo.TableName() }

func (u userSubscribe) Alias() string { return u.userSubscribeDo.Alias() }

func (u *userSubscribe) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userSubscribe) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["obj_type"] = u.ObjType
	u.fieldMap["obj_id"] = u.ObjID
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
}

func (u userSubscribe) clone(db *gorm.DB) userSubscribe {
	u.userSubscribeDo.ReplaceDB(db)
	return u
}

type userSubscribeDo struct{ gen.DO }

func (u userSubscribeDo) Debug() *userSubscribeDo {
	return u.withDO(u.DO.Debug())
}

func (u userSubscribeDo) WithContext(ctx context.Context) *userSubscribeDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userSubscribeDo) ReadDB() *userSubscribeDo {
	return u.Clauses(dbresolver.Read)
}

func (u userSubscribeDo) WriteDB() *userSubscribeDo {
	return u.Clauses(dbresolver.Write)
}

func (u userSubscribeDo) Clauses(conds ...clause.Expression) *userSubscribeDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userSubscribeDo) Returning(value interface{}, columns ...string) *userSubscribeDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userSubscribeDo) Not(conds ...gen.Condition) *userSubscribeDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userSubscribeDo) Or(conds ...gen.Condition) *userSubscribeDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userSubscribeDo) Select(conds ...field.Expr) *userSubscribeDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userSubscribeDo) Where(conds ...gen.Condition) *userSubscribeDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userSubscribeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userSubscribeDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userSubscribeDo) Order(conds ...field.Expr) *userSubscribeDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userSubscribeDo) Distinct(cols ...field.Expr) *userSubscribeDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userSubscribeDo) Omit(cols ...field.Expr) *userSubscribeDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userSubscribeDo) Join(table schema.Tabler, on ...field.Expr) *userSubscribeDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userSubscribeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userSubscribeDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userSubscribeDo) RightJoin(table schema.Tabler, on ...field.Expr) *userSubscribeDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userSubscribeDo) Group(cols ...field.Expr) *userSubscribeDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userSubscribeDo) Having(conds ...gen.Condition) *userSubscribeDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userSubscribeDo) Limit(limit int) *userSubscribeDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userSubscribeDo) Offset(offset int) *userSubscribeDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userSubscribeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userSubscribeDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userSubscribeDo) Unscoped() *userSubscribeDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userSubscribeDo) Create(values ...*model.UserSubscribe) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userSubscribeDo) CreateInBatches(values []*model.UserSubscribe, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userSubscribeDo) Save(values ...*model.UserSubscribe) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userSubscribeDo) First() (*model.UserSubscribe, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSubscribe), nil
	}
}

func (u userSubscribeDo) Take() (*model.UserSubscribe, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSubscribe), nil
	}
}

func (u userSubscribeDo) Last() (*model.UserSubscribe, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSubscribe), nil
	}
}

func (u userSubscribeDo) Find() ([]*model.UserSubscribe, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserSubscribe), err
}

func (u userSubscribeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSubscribe, err error) {
	buf := make([]*model.UserSubscribe, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userSubscribeDo) FindInBatches(result *[]*model.UserSubscribe, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userSubscribeDo) Attrs(attrs ...field.AssignExpr) *userSubscribeDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userSubscribeDo) Assign(attrs ...field.AssignExpr) *userSubscribeDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userSubscribeDo) Joins(fields ...field.RelationField) *userSubscribeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userSubscribeDo) Preload(fields ...field.RelationField) *userSubscribeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userSubscribeDo) FirstOrInit() (*model.UserSubscribe, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSubscribe), nil
	}
}

func (u userSubscribeDo) FirstOrCreate() (*model.UserSubscribe, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSubscribe), nil
	}
}

func (u userSubscribeDo) FindByPage(offset int, limit int) (result []*model.UserSubscribe, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userSubscribeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userSubscribeDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u *userSubscribeDo) withDO(do gen.Dao) *userSubscribeDo {
	u.DO = *do.(*gen.DO)
	return u
}
