// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"main/app/service/user/dao/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserSubject(db *gorm.DB) userSubject {
	_userSubject := userSubject{}

	_userSubject.userSubjectDo.UseDB(db)
	_userSubject.userSubjectDo.UseModel(&model.UserSubject{})

	tableName := _userSubject.userSubjectDo.TableName()
	_userSubject.ALL = field.NewField(tableName, "*")
	_userSubject.ID = field.NewInt64(tableName, "id")
	_userSubject.Username = field.NewString(tableName, "username")
	_userSubject.Password = field.NewString(tableName, "password")
	_userSubject.Nickname = field.NewString(tableName, "nickname")
	_userSubject.Email = field.NewString(tableName, "email")
	_userSubject.Phone = field.NewString(tableName, "phone")
	_userSubject.LastIP = field.NewString(tableName, "last_ip")
	_userSubject.Vip = field.NewInt32(tableName, "vip")
	_userSubject.Follower = field.NewInt32(tableName, "follower")
	_userSubject.State = field.NewInt32(tableName, "state")
	_userSubject.CreateTime = field.NewTime(tableName, "create_time")
	_userSubject.UpdateTime = field.NewTime(tableName, "update_time")

	_userSubject.fillFieldMap()

	return _userSubject
}

type userSubject struct {
	userSubjectDo userSubjectDo

	ALL        field.Field
	ID         field.Int64
	Username   field.String
	Password   field.String
	Nickname   field.String
	Email      field.String
	Phone      field.String
	LastIP     field.String
	Vip        field.Int32
	Follower   field.Int32
	State      field.Int32
	CreateTime field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (u userSubject) Table(newTableName string) *userSubject {
	u.userSubjectDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userSubject) As(alias string) *userSubject {
	u.userSubjectDo.DO = *(u.userSubjectDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userSubject) updateTableName(table string) *userSubject {
	u.ALL = field.NewField(table, "*")
	u.ID = field.NewInt64(table, "id")
	u.Username = field.NewString(table, "username")
	u.Password = field.NewString(table, "password")
	u.Nickname = field.NewString(table, "nickname")
	u.Email = field.NewString(table, "email")
	u.Phone = field.NewString(table, "phone")
	u.LastIP = field.NewString(table, "last_ip")
	u.Vip = field.NewInt32(table, "vip")
	u.Follower = field.NewInt32(table, "follower")
	u.State = field.NewInt32(table, "state")
	u.CreateTime = field.NewTime(table, "create_time")
	u.UpdateTime = field.NewTime(table, "update_time")

	u.fillFieldMap()

	return u
}

func (u *userSubject) WithContext(ctx context.Context) *userSubjectDo {
	return u.userSubjectDo.WithContext(ctx)
}

func (u userSubject) TableName() string { return u.userSubjectDo.TableName() }

func (u userSubject) Alias() string { return u.userSubjectDo.Alias() }

func (u *userSubject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userSubject) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 12)
	u.fieldMap["id"] = u.ID
	u.fieldMap["username"] = u.Username
	u.fieldMap["password"] = u.Password
	u.fieldMap["nickname"] = u.Nickname
	u.fieldMap["email"] = u.Email
	u.fieldMap["phone"] = u.Phone
	u.fieldMap["last_ip"] = u.LastIP
	u.fieldMap["vip"] = u.Vip
	u.fieldMap["follower"] = u.Follower
	u.fieldMap["state"] = u.State
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
}

func (u userSubject) clone(db *gorm.DB) userSubject {
	u.userSubjectDo.ReplaceDB(db)
	return u
}

type userSubjectDo struct{ gen.DO }

func (u userSubjectDo) Debug() *userSubjectDo {
	return u.withDO(u.DO.Debug())
}

func (u userSubjectDo) WithContext(ctx context.Context) *userSubjectDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userSubjectDo) ReadDB() *userSubjectDo {
	return u.Clauses(dbresolver.Read)
}

func (u userSubjectDo) WriteDB() *userSubjectDo {
	return u.Clauses(dbresolver.Write)
}

func (u userSubjectDo) Clauses(conds ...clause.Expression) *userSubjectDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userSubjectDo) Returning(value interface{}, columns ...string) *userSubjectDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userSubjectDo) Not(conds ...gen.Condition) *userSubjectDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userSubjectDo) Or(conds ...gen.Condition) *userSubjectDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userSubjectDo) Select(conds ...field.Expr) *userSubjectDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userSubjectDo) Where(conds ...gen.Condition) *userSubjectDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userSubjectDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userSubjectDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userSubjectDo) Order(conds ...field.Expr) *userSubjectDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userSubjectDo) Distinct(cols ...field.Expr) *userSubjectDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userSubjectDo) Omit(cols ...field.Expr) *userSubjectDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userSubjectDo) Join(table schema.Tabler, on ...field.Expr) *userSubjectDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userSubjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userSubjectDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userSubjectDo) RightJoin(table schema.Tabler, on ...field.Expr) *userSubjectDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userSubjectDo) Group(cols ...field.Expr) *userSubjectDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userSubjectDo) Having(conds ...gen.Condition) *userSubjectDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userSubjectDo) Limit(limit int) *userSubjectDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userSubjectDo) Offset(offset int) *userSubjectDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userSubjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userSubjectDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userSubjectDo) Unscoped() *userSubjectDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userSubjectDo) Create(values ...*model.UserSubject) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userSubjectDo) CreateInBatches(values []*model.UserSubject, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userSubjectDo) Save(values ...*model.UserSubject) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userSubjectDo) First() (*model.UserSubject, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSubject), nil
	}
}

func (u userSubjectDo) Take() (*model.UserSubject, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSubject), nil
	}
}

func (u userSubjectDo) Last() (*model.UserSubject, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSubject), nil
	}
}

func (u userSubjectDo) Find() ([]*model.UserSubject, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserSubject), err
}

func (u userSubjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSubject, err error) {
	buf := make([]*model.UserSubject, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userSubjectDo) FindInBatches(result *[]*model.UserSubject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userSubjectDo) Attrs(attrs ...field.AssignExpr) *userSubjectDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userSubjectDo) Assign(attrs ...field.AssignExpr) *userSubjectDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userSubjectDo) Joins(fields ...field.RelationField) *userSubjectDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userSubjectDo) Preload(fields ...field.RelationField) *userSubjectDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userSubjectDo) FirstOrInit() (*model.UserSubject, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSubject), nil
	}
}

func (u userSubjectDo) FirstOrCreate() (*model.UserSubject, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSubject), nil
	}
}

func (u userSubjectDo) FindByPage(offset int, limit int) (result []*model.UserSubject, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userSubjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userSubjectDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u *userSubjectDo) withDO(do gen.Dao) *userSubjectDo {
	u.DO = *do.(*gen.DO)
	return u
}
