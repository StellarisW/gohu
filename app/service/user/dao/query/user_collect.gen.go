// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"main/app/service/user/dao/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserCollect(db *gorm.DB) userCollect {
	_userCollect := userCollect{}

	_userCollect.userCollectDo.UseDB(db)
	_userCollect.userCollectDo.UseModel(&model.UserCollect{})

	tableName := _userCollect.userCollectDo.TableName()
	_userCollect.ALL = field.NewField(tableName, "*")
	_userCollect.UserID = field.NewInt64(tableName, "user_id")
	_userCollect.ObjID = field.NewInt64(tableName, "obj_id")
	_userCollect.ObjType = field.NewInt32(tableName, "obj_type")
	_userCollect.CreateTime = field.NewTime(tableName, "create_time")
	_userCollect.UpdateTime = field.NewTime(tableName, "update_time")

	_userCollect.fillFieldMap()

	return _userCollect
}

type userCollect struct {
	userCollectDo userCollectDo

	ALL        field.Field
	UserID     field.Int64
	ObjID      field.Int64
	ObjType    field.Int32
	CreateTime field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (u userCollect) Table(newTableName string) *userCollect {
	u.userCollectDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userCollect) As(alias string) *userCollect {
	u.userCollectDo.DO = *(u.userCollectDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userCollect) updateTableName(table string) *userCollect {
	u.ALL = field.NewField(table, "*")
	u.UserID = field.NewInt64(table, "user_id")
	u.ObjID = field.NewInt64(table, "obj_id")
	u.ObjType = field.NewInt32(table, "obj_type")
	u.CreateTime = field.NewTime(table, "create_time")
	u.UpdateTime = field.NewTime(table, "update_time")

	u.fillFieldMap()

	return u
}

func (u *userCollect) WithContext(ctx context.Context) *userCollectDo {
	return u.userCollectDo.WithContext(ctx)
}

func (u userCollect) TableName() string { return u.userCollectDo.TableName() }

func (u userCollect) Alias() string { return u.userCollectDo.Alias() }

func (u *userCollect) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userCollect) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["obj_id"] = u.ObjID
	u.fieldMap["obj_type"] = u.ObjType
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
}

func (u userCollect) clone(db *gorm.DB) userCollect {
	u.userCollectDo.ReplaceDB(db)
	return u
}

type userCollectDo struct{ gen.DO }

func (u userCollectDo) Debug() *userCollectDo {
	return u.withDO(u.DO.Debug())
}

func (u userCollectDo) WithContext(ctx context.Context) *userCollectDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userCollectDo) ReadDB() *userCollectDo {
	return u.Clauses(dbresolver.Read)
}

func (u userCollectDo) WriteDB() *userCollectDo {
	return u.Clauses(dbresolver.Write)
}

func (u userCollectDo) Clauses(conds ...clause.Expression) *userCollectDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userCollectDo) Returning(value interface{}, columns ...string) *userCollectDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userCollectDo) Not(conds ...gen.Condition) *userCollectDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userCollectDo) Or(conds ...gen.Condition) *userCollectDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userCollectDo) Select(conds ...field.Expr) *userCollectDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userCollectDo) Where(conds ...gen.Condition) *userCollectDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userCollectDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userCollectDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userCollectDo) Order(conds ...field.Expr) *userCollectDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userCollectDo) Distinct(cols ...field.Expr) *userCollectDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userCollectDo) Omit(cols ...field.Expr) *userCollectDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userCollectDo) Join(table schema.Tabler, on ...field.Expr) *userCollectDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userCollectDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userCollectDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userCollectDo) RightJoin(table schema.Tabler, on ...field.Expr) *userCollectDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userCollectDo) Group(cols ...field.Expr) *userCollectDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userCollectDo) Having(conds ...gen.Condition) *userCollectDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userCollectDo) Limit(limit int) *userCollectDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userCollectDo) Offset(offset int) *userCollectDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userCollectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userCollectDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userCollectDo) Unscoped() *userCollectDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userCollectDo) Create(values ...*model.UserCollect) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userCollectDo) CreateInBatches(values []*model.UserCollect, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userCollectDo) Save(values ...*model.UserCollect) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userCollectDo) First() (*model.UserCollect, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollect), nil
	}
}

func (u userCollectDo) Take() (*model.UserCollect, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollect), nil
	}
}

func (u userCollectDo) Last() (*model.UserCollect, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollect), nil
	}
}

func (u userCollectDo) Find() ([]*model.UserCollect, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserCollect), err
}

func (u userCollectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCollect, err error) {
	buf := make([]*model.UserCollect, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userCollectDo) FindInBatches(result *[]*model.UserCollect, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userCollectDo) Attrs(attrs ...field.AssignExpr) *userCollectDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userCollectDo) Assign(attrs ...field.AssignExpr) *userCollectDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userCollectDo) Joins(fields ...field.RelationField) *userCollectDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userCollectDo) Preload(fields ...field.RelationField) *userCollectDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userCollectDo) FirstOrInit() (*model.UserCollect, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollect), nil
	}
}

func (u userCollectDo) FirstOrCreate() (*model.UserCollect, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollect), nil
	}
}

func (u userCollectDo) FindByPage(offset int, limit int) (result []*model.UserCollect, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userCollectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userCollectDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u *userCollectDo) withDO(do gen.Dao) *userCollectDo {
	u.DO = *do.(*gen.DO)
	return u
}
