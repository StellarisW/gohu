// Code generated by goctl. DO NOT EDIT!
// Source: crud.proto

package crud

import (
	"context"

	"main/app/service/user/rpc/crud/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChangeFollowerReq   = pb.ChangeFollowerReq
	ChangeFollowerRes   = pb.ChangeFollowerRes
	ChangeNicknameReq   = pb.ChangeNicknameReq
	ChangeNicknameRes   = pb.ChangeNicknameRes
	DeleteCollectionReq = pb.DeleteCollectionReq
	DeleteCollectionRes = pb.DeleteCollectionRes
	DoCollectionReq     = pb.DoCollectionReq
	DoCollectionRes     = pb.DoCollectionRes
	LoginReq            = pb.LoginReq
	LoginRes            = pb.LoginRes
	LoginRes_Data       = pb.LoginRes_Data
	RegisterReq         = pb.RegisterReq
	RegisterRes         = pb.RegisterRes

	Crud interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error)
		DoCollection(ctx context.Context, in *DoCollectionReq, opts ...grpc.CallOption) (*DoCollectionRes, error)
		ChangeNickName(ctx context.Context, in *ChangeNicknameReq, opts ...grpc.CallOption) (*ChangeNicknameRes, error)
		ChangeFollower(ctx context.Context, in *ChangeFollowerReq, opts ...grpc.CallOption) (*ChangeFollowerRes, error)
	}

	defaultCrud struct {
		cli zrpc.Client
	}
)

func NewCrud(cli zrpc.Client) Crud {
	return &defaultCrud{
		cli: cli,
	}
}

func (m *defaultCrud) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultCrud) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultCrud) DoCollection(ctx context.Context, in *DoCollectionReq, opts ...grpc.CallOption) (*DoCollectionRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.DoCollection(ctx, in, opts...)
}

func (m *defaultCrud) ChangeNickName(ctx context.Context, in *ChangeNicknameReq, opts ...grpc.CallOption) (*ChangeNicknameRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.ChangeNickName(ctx, in, opts...)
}

func (m *defaultCrud) ChangeFollower(ctx context.Context, in *ChangeFollowerReq, opts ...grpc.CallOption) (*ChangeFollowerRes, error) {
	client := pb.NewCrudClient(m.cli.Conn())
	return client.ChangeFollower(ctx, in, opts...)
}
