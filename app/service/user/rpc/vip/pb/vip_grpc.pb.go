// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: vip.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VipClient is the client API for Vip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VipClient interface {
	Upgrade(ctx context.Context, in *UpgradeReq, opts ...grpc.CallOption) (*UpgradeRes, error)
	Reset(ctx context.Context, in *ResetReq, opts ...grpc.CallOption) (*ResetRes, error)
}

type vipClient struct {
	cc grpc.ClientConnInterface
}

func NewVipClient(cc grpc.ClientConnInterface) VipClient {
	return &vipClient{cc}
}

func (c *vipClient) Upgrade(ctx context.Context, in *UpgradeReq, opts ...grpc.CallOption) (*UpgradeRes, error) {
	out := new(UpgradeRes)
	err := c.cc.Invoke(ctx, "/vip.Vip/Upgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) Reset(ctx context.Context, in *ResetReq, opts ...grpc.CallOption) (*ResetRes, error) {
	out := new(ResetRes)
	err := c.cc.Invoke(ctx, "/vip.Vip/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VipServer is the server API for Vip service.
// All implementations must embed UnimplementedVipServer
// for forward compatibility
type VipServer interface {
	Upgrade(context.Context, *UpgradeReq) (*UpgradeRes, error)
	Reset(context.Context, *ResetReq) (*ResetRes, error)
	mustEmbedUnimplementedVipServer()
}

// UnimplementedVipServer must be embedded to have forward compatible implementations.
type UnimplementedVipServer struct {
}

func (UnimplementedVipServer) Upgrade(context.Context, *UpgradeReq) (*UpgradeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upgrade not implemented")
}
func (UnimplementedVipServer) Reset(context.Context, *ResetReq) (*ResetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedVipServer) mustEmbedUnimplementedVipServer() {}

// UnsafeVipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VipServer will
// result in compilation errors.
type UnsafeVipServer interface {
	mustEmbedUnimplementedVipServer()
}

func RegisterVipServer(s grpc.ServiceRegistrar, srv VipServer) {
	s.RegisterService(&Vip_ServiceDesc, srv)
}

func _Vip_Upgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).Upgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vip.Vip/Upgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).Upgrade(ctx, req.(*UpgradeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vip.Vip/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).Reset(ctx, req.(*ResetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Vip_ServiceDesc is the grpc.ServiceDesc for Vip service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vip_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vip.Vip",
	HandlerType: (*VipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upgrade",
			Handler:    _Vip_Upgrade_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _Vip_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vip.proto",
}
