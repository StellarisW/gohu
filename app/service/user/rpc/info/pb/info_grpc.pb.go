// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: info.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InfoClient is the client API for Info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoClient interface {
	GetObjInfo(ctx context.Context, in *GetObjInfoReq, opts ...grpc.CallOption) (*GetObjInfoRes, error)
	GetPersonalInfo(ctx context.Context, in *GetPersonalInfoReq, opts ...grpc.CallOption) (*GetPersonalInfoRes, error)
	GetCollectionInfo(ctx context.Context, in *GetCollectionInfoReq, opts ...grpc.CallOption) (*GetCollectionInfoRes, error)
	GetNotificationInfo(ctx context.Context, in *GetNotificationInfoReq, opts ...grpc.CallOption) (*GetNotificationInfoRes, error)
	GetSubscribeInfo(ctx context.Context, in *GetSubscribeInfoReq, opts ...grpc.CallOption) (*GetSubscribeInfoRes, error)
}

type infoClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoClient(cc grpc.ClientConnInterface) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) GetObjInfo(ctx context.Context, in *GetObjInfoReq, opts ...grpc.CallOption) (*GetObjInfoRes, error) {
	out := new(GetObjInfoRes)
	err := c.cc.Invoke(ctx, "/info.Info/GetObjInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) GetPersonalInfo(ctx context.Context, in *GetPersonalInfoReq, opts ...grpc.CallOption) (*GetPersonalInfoRes, error) {
	out := new(GetPersonalInfoRes)
	err := c.cc.Invoke(ctx, "/info.Info/GetPersonalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) GetCollectionInfo(ctx context.Context, in *GetCollectionInfoReq, opts ...grpc.CallOption) (*GetCollectionInfoRes, error) {
	out := new(GetCollectionInfoRes)
	err := c.cc.Invoke(ctx, "/info.Info/GetCollectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) GetNotificationInfo(ctx context.Context, in *GetNotificationInfoReq, opts ...grpc.CallOption) (*GetNotificationInfoRes, error) {
	out := new(GetNotificationInfoRes)
	err := c.cc.Invoke(ctx, "/info.Info/GetNotificationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) GetSubscribeInfo(ctx context.Context, in *GetSubscribeInfoReq, opts ...grpc.CallOption) (*GetSubscribeInfoRes, error) {
	out := new(GetSubscribeInfoRes)
	err := c.cc.Invoke(ctx, "/info.Info/GetSubscribeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServer is the server API for Info service.
// All implementations must embed UnimplementedInfoServer
// for forward compatibility
type InfoServer interface {
	GetObjInfo(context.Context, *GetObjInfoReq) (*GetObjInfoRes, error)
	GetPersonalInfo(context.Context, *GetPersonalInfoReq) (*GetPersonalInfoRes, error)
	GetCollectionInfo(context.Context, *GetCollectionInfoReq) (*GetCollectionInfoRes, error)
	GetNotificationInfo(context.Context, *GetNotificationInfoReq) (*GetNotificationInfoRes, error)
	GetSubscribeInfo(context.Context, *GetSubscribeInfoReq) (*GetSubscribeInfoRes, error)
	mustEmbedUnimplementedInfoServer()
}

// UnimplementedInfoServer must be embedded to have forward compatible implementations.
type UnimplementedInfoServer struct {
}

func (UnimplementedInfoServer) GetObjInfo(context.Context, *GetObjInfoReq) (*GetObjInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjInfo not implemented")
}
func (UnimplementedInfoServer) GetPersonalInfo(context.Context, *GetPersonalInfoReq) (*GetPersonalInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalInfo not implemented")
}
func (UnimplementedInfoServer) GetCollectionInfo(context.Context, *GetCollectionInfoReq) (*GetCollectionInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionInfo not implemented")
}
func (UnimplementedInfoServer) GetNotificationInfo(context.Context, *GetNotificationInfoReq) (*GetNotificationInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationInfo not implemented")
}
func (UnimplementedInfoServer) GetSubscribeInfo(context.Context, *GetSubscribeInfoReq) (*GetSubscribeInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribeInfo not implemented")
}
func (UnimplementedInfoServer) mustEmbedUnimplementedInfoServer() {}

// UnsafeInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoServer will
// result in compilation errors.
type UnsafeInfoServer interface {
	mustEmbedUnimplementedInfoServer()
}

func RegisterInfoServer(s grpc.ServiceRegistrar, srv InfoServer) {
	s.RegisterService(&Info_ServiceDesc, srv)
}

func _Info_GetObjInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetObjInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info.Info/GetObjInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetObjInfo(ctx, req.(*GetObjInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_GetPersonalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetPersonalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info.Info/GetPersonalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetPersonalInfo(ctx, req.(*GetPersonalInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_GetCollectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetCollectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info.Info/GetCollectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetCollectionInfo(ctx, req.(*GetCollectionInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_GetNotificationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetNotificationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info.Info/GetNotificationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetNotificationInfo(ctx, req.(*GetNotificationInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_GetSubscribeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscribeInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetSubscribeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info.Info/GetSubscribeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetSubscribeInfo(ctx, req.(*GetSubscribeInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Info_ServiceDesc is the grpc.ServiceDesc for Info service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Info_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "info.Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetObjInfo",
			Handler:    _Info_GetObjInfo_Handler,
		},
		{
			MethodName: "GetPersonalInfo",
			Handler:    _Info_GetPersonalInfo_Handler,
		},
		{
			MethodName: "GetCollectionInfo",
			Handler:    _Info_GetCollectionInfo_Handler,
		},
		{
			MethodName: "GetNotificationInfo",
			Handler:    _Info_GetNotificationInfo_Handler,
		},
		{
			MethodName: "GetSubscribeInfo",
			Handler:    _Info_GetSubscribeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "info.proto",
}
